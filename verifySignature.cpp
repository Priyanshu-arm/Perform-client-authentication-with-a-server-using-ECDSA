#include <iostream>
#include <string>
#include <stdint.h>
#include "sha2.h"
#include "ecdsa.h"
#include "secp256k1.h"
#include "bignum.h"

int main() {
const std::string serial_id = "CLIENT123456";

uint8_t hash[32];


sha256_Raw(reinterpret_cast<const uint8_t*>(serial_id.c_str()), serial_id.size(), hash);


uint8_t signature[64] = {
0x9a, 0x2f, 0x7d, 0x48, 0x5b, 0xe3, 0x1f, 0xa4,
    0xc9, 0x86, 0x7b, 0x1c, 0x4d, 0x32, 0x19, 0x55,
    0x0a, 0x67, 0xee, 0x22, 0x3f, 0x94, 0x8c, 0x1a,
    0xd3, 0x5b, 0x7f, 0x4c, 0x9e, 0x11, 0x28, 0x76,

    0x1f, 0x87, 0xae, 0x39, 0x2b, 0xdd, 0x4e, 0x93,
    0x65, 0x0c, 0x88, 0xf1, 0x7d, 0x33, 0xa9, 0x02,
    0x44, 0x6f, 0x51, 0xb2, 0x7e, 0xca, 0x11, 0x0d,
    0x93, 0xe8, 0x7a, 0x40, 0x19, 0xfd, 0x56, 0xbc

};
 uint8_t publicKey[65] = {
    0x04, 
    0xa1, 0x2f, 0x7c, 0xd8, 0x5e, 0x3a, 0x9b, 0x12,
    0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x01,
    0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01,
    0x23, 0x45, 0x67, 0x89, 0x0a, 0xbc, 0xde, 0xf0, 

    0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x70, 0x81,
    0x92, 0xa3, 0xb4, 0xc5, 0xd6, 0xe7, 0xf8, 0x09,
    0x1a, 0x2b, 0x3c, 0x4d, 0x5e, 0x6f, 0x70, 0x81,
    0x92, 0xa3, 0xb4, 0xc5, 0xd6, 0xe7, 0xf8, 0x09 
 };

 bool isValid = ecdsa_verify(&secp256k1,publicKey,hash,signature);

if (isValid){
    std::cout<<"[Server] Signature is valid"<<std::endl;

}else {
    std::cout<<"[Server] Signature is  not valid"<<std::endl;
}
  return 0;
}
